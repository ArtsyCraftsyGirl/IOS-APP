workflows:
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    environment:
      groups:
        - ios_credentials
        - appstore_credentials
      ios_signing:
        provisioning_profiles:
          - Production Profile
        certificates:
          - JbPaladin Certificate

    integrations:
      app_store_connect: Codemagic       

    scripts:
      - name: Install npm dependencies and update Cordova version
        script: | 
          npm install
          npm install -g cordova

      - name: Install Cordova Splash Screen Plugin
        script: |
          cordova plugin add cordova-plugin-splashscreen

      - name: Setup Cordova iOS platform
        script: | 
          cordova platform remove ios --nosave
          cordova platform add ios \
            --confirm \
            --no-interactive \
            --save  

      - name: Set App Uses Non-Exempt Encryption in Info.plist
        script: |
          INFO_PLIST_PATH="platforms/ios/JbPaladinPatriotsClock/Info.plist"
          if [ -f "$INFO_PLIST_PATH" ]; then
            /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$INFO_PLIST_PATH" || echo "Key already exists or error occurred."
            echo "✅ ITSAppUsesNonExemptEncryption set to false in Info.plist."
          else
            echo "⚠️ Info.plist not found!"
          fi

      - name: Clean Background Modes (Pre-Signing)
        script: |
          PLIST="platforms/ios/JbPaladinPatriotsClock/Info.plist"

          if /usr/libexec/PlistBuddy -c "Print :UIBackgroundModes" "$PLIST" &>/dev/null; then
            COUNT=$(/usr/libexec/PlistBuddy -c "Print :UIBackgroundModes" "$PLIST" | grep -c 'Item')
            for ((i=0; i<COUNT; i++)); do
              ITEM=$(/usr/libexec/PlistBuddy -c "Print :UIBackgroundModes:$i" "$PLIST" 2>/dev/null)
              if [ "$ITEM" == "audio" ]; then
                /usr/libexec/PlistBuddy -c "Delete :UIBackgroundModes:$i" "$PLIST" && echo "✅ Removed 'audio' background mode"
                break
              fi
            done
          else
            echo "ℹ️ No UIBackgroundModes key found in Info.plist"
          fi

          chmod 444 "$PLIST" # Lock against plugin modifications
          echo "✅ Finished cleaning background modes"

      - name: Copy custom splash screens to the Xcode project
        script: | 
          SPLASH_SCREEN_PATH="res/screen/ios/splash/"
          IOS_SPLASH_PLATFORM_PATH="platforms/ios/JbPaladinPatriotsClock/Images.xcassets/Splash.imageset/"

          if [ -d "$SPLASH_SCREEN_PATH" ]; then
            cp -R "$SPLASH_SCREEN_PATH" "$IOS_SPLASH_PLATFORM_PATH"
            echo "✅ Custom splash screens copied successfully."
          else
            echo "⚠️ Custom splash screens folder not found!"
          fi

      - name: Copy custom app icons to AppIcon.appiconset
        script: |
          ICON_SOURCE_PATH="res/AppIcon.appiconset"
          ICON_DEST_PATH="platforms/ios/JbPaladinPatriotsClock/Images.xcassets/AppIcon.appiconset/"

          if [ -d "$ICON_SOURCE_PATH" ]; then
            rm -rf "$ICON_DEST_PATH"
            mkdir -p "$ICON_DEST_PATH"
            cp -R "$ICON_SOURCE_PATH/"* "$ICON_DEST_PATH"
            echo "✅ App icons copied to AppIcon.appiconset."
          else
            echo "⚠️ Icon source directory not found!"
          fi

      - name: Set up code signing settings on Xcode project
        script: | 
          xcode-project use-profiles --project platforms/ios/JbPaladinPatriotsClock.xcodeproj

      - name: Build ipa for distribution
        script: | 
          cat /Users/builder/export_options.plist
          package_type=$(defaults read /Users/builder/export_options.plist method)
          identity=$(defaults read /Users/builder/export_options.plist signingCertificate)
          team=$(defaults read /Users/builder/export_options.plist teamID)
          profile=$(find '/Users/builder/Library/MobileDevice/Provisioning Profiles' -name "*.mobileprovision")
          profile_uuid=$(grep UUID -A1 -a "$profile" | grep -io "[-A-F0-9]\{36\}")

          cat > build.json <<EOF
          {
            "ios": {
              "release": {
                "codeSignIdentity": "$identity",
                "developmentTeam": "$team",
                "packageType": "$package_type",
                "provisioningProfile": "$profile_uuid"
              }
            }
          }
          EOF
          cordova build ios --release --device --buildConfig='build.json'

    artifacts:
      - /Users/builder/clone/platforms/ios/build/Release-iphoneos/JbPaladinPatriotsClock.ipa
      - /tmp/xcodebuild_logs/*.log
